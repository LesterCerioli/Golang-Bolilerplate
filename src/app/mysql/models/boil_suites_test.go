// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Businesses", testBusinesses)
	t.Run("Employees", testEmployees)
	t.Run("Offices", testOffices)
	t.Run("Visits", testVisits)
}

func TestDelete(t *testing.T) {
	t.Run("Businesses", testBusinessesDelete)
	t.Run("Employees", testEmployeesDelete)
	t.Run("Offices", testOfficesDelete)
	t.Run("Visits", testVisitsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Businesses", testBusinessesQueryDeleteAll)
	t.Run("Employees", testEmployeesQueryDeleteAll)
	t.Run("Offices", testOfficesQueryDeleteAll)
	t.Run("Visits", testVisitsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Businesses", testBusinessesSliceDeleteAll)
	t.Run("Employees", testEmployeesSliceDeleteAll)
	t.Run("Offices", testOfficesSliceDeleteAll)
	t.Run("Visits", testVisitsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Businesses", testBusinessesExists)
	t.Run("Employees", testEmployeesExists)
	t.Run("Offices", testOfficesExists)
	t.Run("Visits", testVisitsExists)
}

func TestFind(t *testing.T) {
	t.Run("Businesses", testBusinessesFind)
	t.Run("Employees", testEmployeesFind)
	t.Run("Offices", testOfficesFind)
	t.Run("Visits", testVisitsFind)
}

func TestBind(t *testing.T) {
	t.Run("Businesses", testBusinessesBind)
	t.Run("Employees", testEmployeesBind)
	t.Run("Offices", testOfficesBind)
	t.Run("Visits", testVisitsBind)
}

func TestOne(t *testing.T) {
	t.Run("Businesses", testBusinessesOne)
	t.Run("Employees", testEmployeesOne)
	t.Run("Offices", testOfficesOne)
	t.Run("Visits", testVisitsOne)
}

func TestAll(t *testing.T) {
	t.Run("Businesses", testBusinessesAll)
	t.Run("Employees", testEmployeesAll)
	t.Run("Offices", testOfficesAll)
	t.Run("Visits", testVisitsAll)
}

func TestCount(t *testing.T) {
	t.Run("Businesses", testBusinessesCount)
	t.Run("Employees", testEmployeesCount)
	t.Run("Offices", testOfficesCount)
	t.Run("Visits", testVisitsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Businesses", testBusinessesHooks)
	t.Run("Employees", testEmployeesHooks)
	t.Run("Offices", testOfficesHooks)
	t.Run("Visits", testVisitsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Businesses", testBusinessesInsert)
	t.Run("Businesses", testBusinessesInsertWhitelist)
	t.Run("Employees", testEmployeesInsert)
	t.Run("Employees", testEmployeesInsertWhitelist)
	t.Run("Offices", testOfficesInsert)
	t.Run("Offices", testOfficesInsertWhitelist)
	t.Run("Visits", testVisitsInsert)
	t.Run("Visits", testVisitsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("EmployeeToBusinessUsingBusiness", testEmployeeToOneBusinessUsingBusiness)
	t.Run("OfficeToBusinessUsingBusiness", testOfficeToOneBusinessUsingBusiness)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BusinessToEmployees", testBusinessToManyEmployees)
	t.Run("BusinessToOffices", testBusinessToManyOffices)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("EmployeeToBusinessUsingEmployees", testEmployeeToOneSetOpBusinessUsingBusiness)
	t.Run("OfficeToBusinessUsingOffices", testOfficeToOneSetOpBusinessUsingBusiness)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("EmployeeToBusinessUsingEmployees", testEmployeeToOneRemoveOpBusinessUsingBusiness)
	t.Run("OfficeToBusinessUsingOffices", testOfficeToOneRemoveOpBusinessUsingBusiness)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BusinessToEmployees", testBusinessToManyAddOpEmployees)
	t.Run("BusinessToOffices", testBusinessToManyAddOpOffices)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("BusinessToEmployees", testBusinessToManySetOpEmployees)
	t.Run("BusinessToOffices", testBusinessToManySetOpOffices)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("BusinessToEmployees", testBusinessToManyRemoveOpEmployees)
	t.Run("BusinessToOffices", testBusinessToManyRemoveOpOffices)
}

func TestReload(t *testing.T) {
	t.Run("Businesses", testBusinessesReload)
	t.Run("Employees", testEmployeesReload)
	t.Run("Offices", testOfficesReload)
	t.Run("Visits", testVisitsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Businesses", testBusinessesReloadAll)
	t.Run("Employees", testEmployeesReloadAll)
	t.Run("Offices", testOfficesReloadAll)
	t.Run("Visits", testVisitsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Businesses", testBusinessesSelect)
	t.Run("Employees", testEmployeesSelect)
	t.Run("Offices", testOfficesSelect)
	t.Run("Visits", testVisitsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Businesses", testBusinessesUpdate)
	t.Run("Employees", testEmployeesUpdate)
	t.Run("Offices", testOfficesUpdate)
	t.Run("Visits", testVisitsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Businesses", testBusinessesSliceUpdateAll)
	t.Run("Employees", testEmployeesSliceUpdateAll)
	t.Run("Offices", testOfficesSliceUpdateAll)
	t.Run("Visits", testVisitsSliceUpdateAll)
}
