// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Business is an object representing the database table.
type Business struct {
	ID        uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Website   null.String `boil:"website" json:"website,omitempty" toml:"website" yaml:"website,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *businessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L businessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusinessColumns = struct {
	ID        string
	Name      string
	Website   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	Website:   "website",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BusinessWhere = struct {
	ID        whereHelperuint
	Name      whereHelpernull_String
	Website   whereHelpernull_String
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperuint{field: "`businesses`.`id`"},
	Name:      whereHelpernull_String{field: "`businesses`.`name`"},
	Website:   whereHelpernull_String{field: "`businesses`.`website`"},
	CreatedAt: whereHelpertime_Time{field: "`businesses`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`businesses`.`updated_at`"},
}

// BusinessRels is where relationship names are stored.
var BusinessRels = struct {
	Employees string
	Offices   string
}{
	Employees: "Employees",
	Offices:   "Offices",
}

// businessR is where relationships are stored.
type businessR struct {
	Employees EmployeeSlice `boil:"Employees" json:"Employees" toml:"Employees" yaml:"Employees"`
	Offices   OfficeSlice   `boil:"Offices" json:"Offices" toml:"Offices" yaml:"Offices"`
}

// NewStruct creates a new relationship struct
func (*businessR) NewStruct() *businessR {
	return &businessR{}
}

// businessL is where Load methods for each relationship are stored.
type businessL struct{}

var (
	businessAllColumns            = []string{"id", "name", "website", "created_at", "updated_at"}
	businessColumnsWithoutDefault = []string{"name", "website"}
	businessColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	businessPrimaryKeyColumns     = []string{"id"}
)

type (
	// BusinessSlice is an alias for a slice of pointers to Business.
	// This should generally be used opposed to []Business.
	BusinessSlice []*Business
	// BusinessHook is the signature for custom Business hook methods
	BusinessHook func(context.Context, boil.ContextExecutor, *Business) error

	businessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	businessType                 = reflect.TypeOf(&Business{})
	businessMapping              = queries.MakeStructMapping(businessType)
	businessPrimaryKeyMapping, _ = queries.BindMapping(businessType, businessMapping, businessPrimaryKeyColumns)
	businessInsertCacheMut       sync.RWMutex
	businessInsertCache          = make(map[string]insertCache)
	businessUpdateCacheMut       sync.RWMutex
	businessUpdateCache          = make(map[string]updateCache)
	businessUpsertCacheMut       sync.RWMutex
	businessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var businessBeforeInsertHooks []BusinessHook
var businessBeforeUpdateHooks []BusinessHook
var businessBeforeDeleteHooks []BusinessHook
var businessBeforeUpsertHooks []BusinessHook

var businessAfterInsertHooks []BusinessHook
var businessAfterSelectHooks []BusinessHook
var businessAfterUpdateHooks []BusinessHook
var businessAfterDeleteHooks []BusinessHook
var businessAfterUpsertHooks []BusinessHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Business) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Business) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Business) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Business) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Business) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Business) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Business) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Business) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Business) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBusinessHook registers your hook function for all future operations.
func AddBusinessHook(hookPoint boil.HookPoint, businessHook BusinessHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		businessBeforeInsertHooks = append(businessBeforeInsertHooks, businessHook)
	case boil.BeforeUpdateHook:
		businessBeforeUpdateHooks = append(businessBeforeUpdateHooks, businessHook)
	case boil.BeforeDeleteHook:
		businessBeforeDeleteHooks = append(businessBeforeDeleteHooks, businessHook)
	case boil.BeforeUpsertHook:
		businessBeforeUpsertHooks = append(businessBeforeUpsertHooks, businessHook)
	case boil.AfterInsertHook:
		businessAfterInsertHooks = append(businessAfterInsertHooks, businessHook)
	case boil.AfterSelectHook:
		businessAfterSelectHooks = append(businessAfterSelectHooks, businessHook)
	case boil.AfterUpdateHook:
		businessAfterUpdateHooks = append(businessAfterUpdateHooks, businessHook)
	case boil.AfterDeleteHook:
		businessAfterDeleteHooks = append(businessAfterDeleteHooks, businessHook)
	case boil.AfterUpsertHook:
		businessAfterUpsertHooks = append(businessAfterUpsertHooks, businessHook)
	}
}

// OneG returns a single business record from the query using the global executor.
func (q businessQuery) OneG(ctx context.Context) (*Business, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single business record from the query using the global executor, and panics on error.
func (q businessQuery) OneGP(ctx context.Context) *Business {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single business record from the query, and panics on error.
func (q businessQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *Business {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single business record from the query.
func (q businessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Business, error) {
	o := &Business{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for businesses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Business records from the query using the global executor.
func (q businessQuery) AllG(ctx context.Context) (BusinessSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all Business records from the query using the global executor, and panics on error.
func (q businessQuery) AllGP(ctx context.Context) BusinessSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Business records from the query, and panics on error.
func (q businessQuery) AllP(ctx context.Context, exec boil.ContextExecutor) BusinessSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Business records from the query.
func (q businessQuery) All(ctx context.Context, exec boil.ContextExecutor) (BusinessSlice, error) {
	var o []*Business

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Business slice")
	}

	if len(businessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Business records in the query, and panics on error.
func (q businessQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all Business records in the query using the global executor, and panics on error.
func (q businessQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Business records in the query, and panics on error.
func (q businessQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Business records in the query.
func (q businessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count businesses rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q businessQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q businessQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q businessQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q businessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if businesses exists")
	}

	return count > 0, nil
}

// Employees retrieves all the employee's Employees with an executor.
func (o *Business) Employees(mods ...qm.QueryMod) employeeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`employees`.`business_id`=?", o.ID),
	)

	query := Employees(queryMods...)
	queries.SetFrom(query.Query, "`employees`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`employees`.*"})
	}

	return query
}

// Offices retrieves all the office's Offices with an executor.
func (o *Business) Offices(mods ...qm.QueryMod) officeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`offices`.`business_id`=?", o.ID),
	)

	query := Offices(queryMods...)
	queries.SetFrom(query.Query, "`offices`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`offices`.*"})
	}

	return query
}

// LoadEmployees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (businessL) LoadEmployees(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusiness interface{}, mods queries.Applicator) error {
	var slice []*Business
	var object *Business

	if singular {
		object = maybeBusiness.(*Business)
	} else {
		slice = *maybeBusiness.(*[]*Business)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &businessR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &businessR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.business_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load employees")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice employees")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Employees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &employeeR{}
			}
			foreign.R.Business = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BusinessID) {
				local.R.Employees = append(local.R.Employees, foreign)
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.Business = local
				break
			}
		}
	}

	return nil
}

// LoadOffices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (businessL) LoadOffices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusiness interface{}, mods queries.Applicator) error {
	var slice []*Business
	var object *Business

	if singular {
		object = maybeBusiness.(*Business)
	} else {
		slice = *maybeBusiness.(*[]*Business)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &businessR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &businessR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`offices`),
		qm.WhereIn(`offices.business_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load offices")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice offices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if len(officeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Offices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &officeR{}
			}
			foreign.R.Business = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BusinessID) {
				local.R.Offices = append(local.R.Offices, foreign)
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.Business = local
				break
			}
		}
	}

	return nil
}

// AddEmployeesG adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Employees.
// Sets related.R.Business appropriately.
// Uses the global database handle.
func (o *Business) AddEmployeesG(ctx context.Context, insert bool, related ...*Employee) error {
	return o.AddEmployees(ctx, boil.GetContextDB(), insert, related...)
}

// AddEmployeesP adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Employees.
// Sets related.R.Business appropriately.
// Panics on error.
func (o *Business) AddEmployeesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) {
	if err := o.AddEmployees(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEmployeesGP adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Employees.
// Sets related.R.Business appropriately.
// Uses the global database handle and panics on error.
func (o *Business) AddEmployeesGP(ctx context.Context, insert bool, related ...*Employee) {
	if err := o.AddEmployees(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEmployees adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Employees.
// Sets related.R.Business appropriately.
func (o *Business) AddEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BusinessID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `employees` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"business_id"}),
				strmangle.WhereClause("`", "`", 0, employeePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BusinessID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &businessR{
			Employees: related,
		}
	} else {
		o.R.Employees = append(o.R.Employees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &employeeR{
				Business: o,
			}
		} else {
			rel.R.Business = o
		}
	}
	return nil
}

// SetEmployeesG removes all previously related items of the
// business replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Business's Employees accordingly.
// Replaces o.R.Employees with related.
// Sets related.R.Business's Employees accordingly.
// Uses the global database handle.
func (o *Business) SetEmployeesG(ctx context.Context, insert bool, related ...*Employee) error {
	return o.SetEmployees(ctx, boil.GetContextDB(), insert, related...)
}

// SetEmployeesP removes all previously related items of the
// business replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Business's Employees accordingly.
// Replaces o.R.Employees with related.
// Sets related.R.Business's Employees accordingly.
// Panics on error.
func (o *Business) SetEmployeesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) {
	if err := o.SetEmployees(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEmployeesGP removes all previously related items of the
// business replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Business's Employees accordingly.
// Replaces o.R.Employees with related.
// Sets related.R.Business's Employees accordingly.
// Uses the global database handle and panics on error.
func (o *Business) SetEmployeesGP(ctx context.Context, insert bool, related ...*Employee) {
	if err := o.SetEmployees(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEmployees removes all previously related items of the
// business replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Business's Employees accordingly.
// Replaces o.R.Employees with related.
// Sets related.R.Business's Employees accordingly.
func (o *Business) SetEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) error {
	query := "update `employees` set `business_id` = null where `business_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Employees {
			queries.SetScanner(&rel.BusinessID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Business = nil
		}

		o.R.Employees = nil
	}
	return o.AddEmployees(ctx, exec, insert, related...)
}

// RemoveEmployeesG relationships from objects passed in.
// Removes related items from R.Employees (uses pointer comparison, removal does not keep order)
// Sets related.R.Business.
// Uses the global database handle.
func (o *Business) RemoveEmployeesG(ctx context.Context, related ...*Employee) error {
	return o.RemoveEmployees(ctx, boil.GetContextDB(), related...)
}

// RemoveEmployeesP relationships from objects passed in.
// Removes related items from R.Employees (uses pointer comparison, removal does not keep order)
// Sets related.R.Business.
// Panics on error.
func (o *Business) RemoveEmployeesP(ctx context.Context, exec boil.ContextExecutor, related ...*Employee) {
	if err := o.RemoveEmployees(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveEmployeesGP relationships from objects passed in.
// Removes related items from R.Employees (uses pointer comparison, removal does not keep order)
// Sets related.R.Business.
// Uses the global database handle and panics on error.
func (o *Business) RemoveEmployeesGP(ctx context.Context, related ...*Employee) {
	if err := o.RemoveEmployees(ctx, boil.GetContextDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveEmployees relationships from objects passed in.
// Removes related items from R.Employees (uses pointer comparison, removal does not keep order)
// Sets related.R.Business.
func (o *Business) RemoveEmployees(ctx context.Context, exec boil.ContextExecutor, related ...*Employee) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BusinessID, nil)
		if rel.R != nil {
			rel.R.Business = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("business_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Employees {
			if rel != ri {
				continue
			}

			ln := len(o.R.Employees)
			if ln > 1 && i < ln-1 {
				o.R.Employees[i] = o.R.Employees[ln-1]
			}
			o.R.Employees = o.R.Employees[:ln-1]
			break
		}
	}

	return nil
}

// AddOfficesG adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.Business appropriately.
// Uses the global database handle.
func (o *Business) AddOfficesG(ctx context.Context, insert bool, related ...*Office) error {
	return o.AddOffices(ctx, boil.GetContextDB(), insert, related...)
}

// AddOfficesP adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.Business appropriately.
// Panics on error.
func (o *Business) AddOfficesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) {
	if err := o.AddOffices(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOfficesGP adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.Business appropriately.
// Uses the global database handle and panics on error.
func (o *Business) AddOfficesGP(ctx context.Context, insert bool, related ...*Office) {
	if err := o.AddOffices(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOffices adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.Business appropriately.
func (o *Business) AddOffices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BusinessID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `offices` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"business_id"}),
				strmangle.WhereClause("`", "`", 0, officePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BusinessID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &businessR{
			Offices: related,
		}
	} else {
		o.R.Offices = append(o.R.Offices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &officeR{
				Business: o,
			}
		} else {
			rel.R.Business = o
		}
	}
	return nil
}

// SetOfficesG removes all previously related items of the
// business replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Business's Offices accordingly.
// Replaces o.R.Offices with related.
// Sets related.R.Business's Offices accordingly.
// Uses the global database handle.
func (o *Business) SetOfficesG(ctx context.Context, insert bool, related ...*Office) error {
	return o.SetOffices(ctx, boil.GetContextDB(), insert, related...)
}

// SetOfficesP removes all previously related items of the
// business replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Business's Offices accordingly.
// Replaces o.R.Offices with related.
// Sets related.R.Business's Offices accordingly.
// Panics on error.
func (o *Business) SetOfficesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) {
	if err := o.SetOffices(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOfficesGP removes all previously related items of the
// business replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Business's Offices accordingly.
// Replaces o.R.Offices with related.
// Sets related.R.Business's Offices accordingly.
// Uses the global database handle and panics on error.
func (o *Business) SetOfficesGP(ctx context.Context, insert bool, related ...*Office) {
	if err := o.SetOffices(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOffices removes all previously related items of the
// business replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Business's Offices accordingly.
// Replaces o.R.Offices with related.
// Sets related.R.Business's Offices accordingly.
func (o *Business) SetOffices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) error {
	query := "update `offices` set `business_id` = null where `business_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Offices {
			queries.SetScanner(&rel.BusinessID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Business = nil
		}

		o.R.Offices = nil
	}
	return o.AddOffices(ctx, exec, insert, related...)
}

// RemoveOfficesG relationships from objects passed in.
// Removes related items from R.Offices (uses pointer comparison, removal does not keep order)
// Sets related.R.Business.
// Uses the global database handle.
func (o *Business) RemoveOfficesG(ctx context.Context, related ...*Office) error {
	return o.RemoveOffices(ctx, boil.GetContextDB(), related...)
}

// RemoveOfficesP relationships from objects passed in.
// Removes related items from R.Offices (uses pointer comparison, removal does not keep order)
// Sets related.R.Business.
// Panics on error.
func (o *Business) RemoveOfficesP(ctx context.Context, exec boil.ContextExecutor, related ...*Office) {
	if err := o.RemoveOffices(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOfficesGP relationships from objects passed in.
// Removes related items from R.Offices (uses pointer comparison, removal does not keep order)
// Sets related.R.Business.
// Uses the global database handle and panics on error.
func (o *Business) RemoveOfficesGP(ctx context.Context, related ...*Office) {
	if err := o.RemoveOffices(ctx, boil.GetContextDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOffices relationships from objects passed in.
// Removes related items from R.Offices (uses pointer comparison, removal does not keep order)
// Sets related.R.Business.
func (o *Business) RemoveOffices(ctx context.Context, exec boil.ContextExecutor, related ...*Office) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BusinessID, nil)
		if rel.R != nil {
			rel.R.Business = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("business_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Offices {
			if rel != ri {
				continue
			}

			ln := len(o.R.Offices)
			if ln > 1 && i < ln-1 {
				o.R.Offices[i] = o.R.Offices[ln-1]
			}
			o.R.Offices = o.R.Offices[:ln-1]
			break
		}
	}

	return nil
}

// Businesses retrieves all the records using an executor.
func Businesses(mods ...qm.QueryMod) businessQuery {
	mods = append(mods, qm.From("`businesses`"))
	return businessQuery{NewQuery(mods...)}
}

// FindBusinessG retrieves a single record by ID.
func FindBusinessG(ctx context.Context, iD uint, selectCols ...string) (*Business, error) {
	return FindBusiness(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBusinessP retrieves a single record by ID with an executor, and panics on error.
func FindBusinessP(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) *Business {
	retobj, err := FindBusiness(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBusinessGP retrieves a single record by ID, and panics on error.
func FindBusinessGP(ctx context.Context, iD uint, selectCols ...string) *Business {
	retobj, err := FindBusiness(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBusiness retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusiness(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Business, error) {
	businessObj := &Business{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `businesses` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, businessObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from businesses")
	}

	return businessObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Business) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Business) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Business) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Business) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no businesses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	businessInsertCacheMut.RLock()
	cache, cached := businessInsertCache[key]
	businessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			businessAllColumns,
			businessColumnsWithDefault,
			businessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(businessType, businessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `businesses` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `businesses` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `businesses` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, businessPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into businesses")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == businessMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for businesses")
	}

CacheNoHooks:
	if !cached {
		businessInsertCacheMut.Lock()
		businessInsertCache[key] = cache
		businessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Business record using the global executor.
// See Update for more documentation.
func (o *Business) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the Business, and panics on error.
// See Update for more documentation.
func (o *Business) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single Business record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Business) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the Business.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Business) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	businessUpdateCacheMut.RLock()
	cache, cached := businessUpdateCache[key]
	businessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			businessAllColumns,
			businessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update businesses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `businesses` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, businessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, append(wl, businessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update businesses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for businesses")
	}

	if !cached {
		businessUpdateCacheMut.Lock()
		businessUpdateCache[key] = cache
		businessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q businessQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q businessQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q businessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for businesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for businesses")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BusinessSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BusinessSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BusinessSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusinessSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `businesses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in business slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all business")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Business) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Business) UpsertGP(ctx context.Context, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Business) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLBusinessUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Business) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no businesses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBusinessUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	businessUpsertCacheMut.RLock()
	cache, cached := businessUpsertCache[key]
	businessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			businessAllColumns,
			businessColumnsWithDefault,
			businessColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			businessAllColumns,
			businessPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert businesses, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "businesses", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `businesses` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(businessType, businessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for businesses")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == businessMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(businessType, businessMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for businesses")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for businesses")
	}

CacheNoHooks:
	if !cached {
		businessUpsertCacheMut.Lock()
		businessUpsertCache[key] = cache
		businessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Business record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Business) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single Business record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Business) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single Business record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Business) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single Business record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Business) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Business provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), businessPrimaryKeyMapping)
	sql := "DELETE FROM `businesses` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from businesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for businesses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q businessQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q businessQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q businessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no businessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from businesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for businesses")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BusinessSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BusinessSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BusinessSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusinessSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(businessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `businesses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from business slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for businesses")
	}

	if len(businessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Business) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Business provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Business) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Business) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Business) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBusiness(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BusinessSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BusinessSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BusinessSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusinessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `businesses`.* FROM `businesses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BusinessSlice")
	}

	*o = slice

	return nil
}

// BusinessExistsG checks if the Business row exists.
func BusinessExistsG(ctx context.Context, iD uint) (bool, error) {
	return BusinessExists(ctx, boil.GetContextDB(), iD)
}

// BusinessExistsP checks if the Business row exists. Panics on error.
func BusinessExistsP(ctx context.Context, exec boil.ContextExecutor, iD uint) bool {
	e, err := BusinessExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BusinessExistsGP checks if the Business row exists. Panics on error.
func BusinessExistsGP(ctx context.Context, iD uint) bool {
	e, err := BusinessExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BusinessExists checks if the Business row exists.
func BusinessExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `businesses` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if businesses exists")
	}

	return exists, nil
}
