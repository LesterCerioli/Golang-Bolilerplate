// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBusinesses(t *testing.T) {
	t.Parallel()

	query := Businesses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBusinessesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusinessesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Businesses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusinessesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BusinessSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusinessesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BusinessExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Business exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BusinessExists to return true, but got false.")
	}
}

func testBusinessesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	businessFound, err := FindBusiness(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if businessFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBusinessesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Businesses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBusinessesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Businesses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBusinessesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	businessOne := &Business{}
	businessTwo := &Business{}
	if err = randomize.Struct(seed, businessOne, businessDBTypes, false, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}
	if err = randomize.Struct(seed, businessTwo, businessDBTypes, false, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = businessOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = businessTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Businesses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBusinessesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	businessOne := &Business{}
	businessTwo := &Business{}
	if err = randomize.Struct(seed, businessOne, businessDBTypes, false, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}
	if err = randomize.Struct(seed, businessTwo, businessDBTypes, false, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = businessOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = businessTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func businessBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func businessAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func businessAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func businessBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func businessAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func businessBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func businessAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func businessBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func businessAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Business) error {
	*o = Business{}
	return nil
}

func testBusinessesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Business{}
	o := &Business{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, businessDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Business object: %s", err)
	}

	AddBusinessHook(boil.BeforeInsertHook, businessBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	businessBeforeInsertHooks = []BusinessHook{}

	AddBusinessHook(boil.AfterInsertHook, businessAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	businessAfterInsertHooks = []BusinessHook{}

	AddBusinessHook(boil.AfterSelectHook, businessAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	businessAfterSelectHooks = []BusinessHook{}

	AddBusinessHook(boil.BeforeUpdateHook, businessBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	businessBeforeUpdateHooks = []BusinessHook{}

	AddBusinessHook(boil.AfterUpdateHook, businessAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	businessAfterUpdateHooks = []BusinessHook{}

	AddBusinessHook(boil.BeforeDeleteHook, businessBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	businessBeforeDeleteHooks = []BusinessHook{}

	AddBusinessHook(boil.AfterDeleteHook, businessAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	businessAfterDeleteHooks = []BusinessHook{}

	AddBusinessHook(boil.BeforeUpsertHook, businessBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	businessBeforeUpsertHooks = []BusinessHook{}

	AddBusinessHook(boil.AfterUpsertHook, businessAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	businessAfterUpsertHooks = []BusinessHook{}
}

func testBusinessesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBusinessesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(businessColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBusinessToManyEmployees(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Business
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BusinessID, a.ID)
	queries.Assign(&c.BusinessID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Employees().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BusinessID, b.BusinessID) {
			bFound = true
		}
		if queries.Equal(v.BusinessID, c.BusinessID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BusinessSlice{&a}
	if err = a.L.LoadEmployees(ctx, tx, false, (*[]*Business)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Employees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Employees = nil
	if err = a.L.LoadEmployees(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Employees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBusinessToManyOffices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Business
	var b, c Office

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, officeDBTypes, false, officeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, officeDBTypes, false, officeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BusinessID, a.ID)
	queries.Assign(&c.BusinessID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Offices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BusinessID, b.BusinessID) {
			bFound = true
		}
		if queries.Equal(v.BusinessID, c.BusinessID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BusinessSlice{&a}
	if err = a.L.LoadOffices(ctx, tx, false, (*[]*Business)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Offices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Offices = nil
	if err = a.L.LoadOffices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Offices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBusinessToManyAddOpEmployees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Business
	var b, c, d, e Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, businessDBTypes, false, strmangle.SetComplement(businessPrimaryKeyColumns, businessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Employee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Employee{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEmployees(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BusinessID) {
			t.Error("foreign key was wrong value", a.ID, first.BusinessID)
		}
		if !queries.Equal(a.ID, second.BusinessID) {
			t.Error("foreign key was wrong value", a.ID, second.BusinessID)
		}

		if first.R.Business != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Business != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Employees[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Employees[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Employees().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBusinessToManySetOpEmployees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Business
	var b, c, d, e Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, businessDBTypes, false, strmangle.SetComplement(businessPrimaryKeyColumns, businessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Employee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetEmployees(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Employees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetEmployees(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Employees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BusinessID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BusinessID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BusinessID) {
		t.Error("foreign key was wrong value", a.ID, d.BusinessID)
	}
	if !queries.Equal(a.ID, e.BusinessID) {
		t.Error("foreign key was wrong value", a.ID, e.BusinessID)
	}

	if b.R.Business != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Business != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Business != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Business != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Employees[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Employees[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBusinessToManyRemoveOpEmployees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Business
	var b, c, d, e Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, businessDBTypes, false, strmangle.SetComplement(businessPrimaryKeyColumns, businessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Employee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddEmployees(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Employees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveEmployees(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Employees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BusinessID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BusinessID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Business != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Business != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Business != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Business != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Employees) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Employees[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Employees[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBusinessToManyAddOpOffices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Business
	var b, c, d, e Office

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, businessDBTypes, false, strmangle.SetComplement(businessPrimaryKeyColumns, businessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Office{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, officeDBTypes, false, strmangle.SetComplement(officePrimaryKeyColumns, officeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Office{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOffices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BusinessID) {
			t.Error("foreign key was wrong value", a.ID, first.BusinessID)
		}
		if !queries.Equal(a.ID, second.BusinessID) {
			t.Error("foreign key was wrong value", a.ID, second.BusinessID)
		}

		if first.R.Business != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Business != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Offices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Offices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Offices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBusinessToManySetOpOffices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Business
	var b, c, d, e Office

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, businessDBTypes, false, strmangle.SetComplement(businessPrimaryKeyColumns, businessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Office{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, officeDBTypes, false, strmangle.SetComplement(officePrimaryKeyColumns, officeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOffices(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Offices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOffices(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Offices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BusinessID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BusinessID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BusinessID) {
		t.Error("foreign key was wrong value", a.ID, d.BusinessID)
	}
	if !queries.Equal(a.ID, e.BusinessID) {
		t.Error("foreign key was wrong value", a.ID, e.BusinessID)
	}

	if b.R.Business != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Business != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Business != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Business != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Offices[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Offices[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBusinessToManyRemoveOpOffices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Business
	var b, c, d, e Office

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, businessDBTypes, false, strmangle.SetComplement(businessPrimaryKeyColumns, businessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Office{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, officeDBTypes, false, strmangle.SetComplement(officePrimaryKeyColumns, officeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOffices(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Offices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOffices(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Offices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BusinessID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BusinessID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Business != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Business != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Business != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Business != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Offices) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Offices[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Offices[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBusinessesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBusinessesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BusinessSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBusinessesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Businesses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	businessDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Website`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_               = bytes.MinRead
)

func testBusinessesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(businessPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(businessAllColumns) == len(businessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, businessDBTypes, true, businessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBusinessesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(businessAllColumns) == len(businessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Business{}
	if err = randomize.Struct(seed, o, businessDBTypes, true, businessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, businessDBTypes, true, businessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(businessAllColumns, businessPrimaryKeyColumns) {
		fields = businessAllColumns
	} else {
		fields = strmangle.SetComplement(
			businessAllColumns,
			businessPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BusinessSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBusinessesUpsert(t *testing.T) {
	t.Parallel()

	if len(businessAllColumns) == len(businessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBusinessUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Business{}
	if err = randomize.Struct(seed, &o, businessDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Business: %s", err)
	}

	count, err := Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, businessDBTypes, false, businessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Business struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Business: %s", err)
	}

	count, err = Businesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
