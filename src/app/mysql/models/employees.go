// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Employee is an object representing the database table.
type Employee struct {
	ID         uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirstName  null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName   null.String `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	Email      null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Password   null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	Active     null.Bool   `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	BusinessID null.Uint   `boil:"business_id" json:"business_id,omitempty" toml:"business_id" yaml:"business_id,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *employeeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L employeeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmployeeColumns = struct {
	ID         string
	FirstName  string
	LastName   string
	Email      string
	Password   string
	Active     string
	BusinessID string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	FirstName:  "first_name",
	LastName:   "last_name",
	Email:      "email",
	Password:   "password",
	Active:     "active",
	BusinessID: "business_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Uint struct{ field string }

func (w whereHelpernull_Uint) EQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint) NEQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Uint) LT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint) LTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint) GT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint) GTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var EmployeeWhere = struct {
	ID         whereHelperuint
	FirstName  whereHelpernull_String
	LastName   whereHelpernull_String
	Email      whereHelpernull_String
	Password   whereHelpernull_String
	Active     whereHelpernull_Bool
	BusinessID whereHelpernull_Uint
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperuint{field: "`employees`.`id`"},
	FirstName:  whereHelpernull_String{field: "`employees`.`first_name`"},
	LastName:   whereHelpernull_String{field: "`employees`.`last_name`"},
	Email:      whereHelpernull_String{field: "`employees`.`email`"},
	Password:   whereHelpernull_String{field: "`employees`.`password`"},
	Active:     whereHelpernull_Bool{field: "`employees`.`active`"},
	BusinessID: whereHelpernull_Uint{field: "`employees`.`business_id`"},
	CreatedAt:  whereHelpertime_Time{field: "`employees`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`employees`.`updated_at`"},
}

// EmployeeRels is where relationship names are stored.
var EmployeeRels = struct {
	Business string
}{
	Business: "Business",
}

// employeeR is where relationships are stored.
type employeeR struct {
	Business *Business `boil:"Business" json:"Business" toml:"Business" yaml:"Business"`
}

// NewStruct creates a new relationship struct
func (*employeeR) NewStruct() *employeeR {
	return &employeeR{}
}

// employeeL is where Load methods for each relationship are stored.
type employeeL struct{}

var (
	employeeAllColumns            = []string{"id", "first_name", "last_name", "email", "password", "active", "business_id", "created_at", "updated_at"}
	employeeColumnsWithoutDefault = []string{"first_name", "last_name", "email", "password", "active", "business_id"}
	employeeColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	employeePrimaryKeyColumns     = []string{"id"}
)

type (
	// EmployeeSlice is an alias for a slice of pointers to Employee.
	// This should generally be used opposed to []Employee.
	EmployeeSlice []*Employee
	// EmployeeHook is the signature for custom Employee hook methods
	EmployeeHook func(context.Context, boil.ContextExecutor, *Employee) error

	employeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	employeeType                 = reflect.TypeOf(&Employee{})
	employeeMapping              = queries.MakeStructMapping(employeeType)
	employeePrimaryKeyMapping, _ = queries.BindMapping(employeeType, employeeMapping, employeePrimaryKeyColumns)
	employeeInsertCacheMut       sync.RWMutex
	employeeInsertCache          = make(map[string]insertCache)
	employeeUpdateCacheMut       sync.RWMutex
	employeeUpdateCache          = make(map[string]updateCache)
	employeeUpsertCacheMut       sync.RWMutex
	employeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var employeeBeforeInsertHooks []EmployeeHook
var employeeBeforeUpdateHooks []EmployeeHook
var employeeBeforeDeleteHooks []EmployeeHook
var employeeBeforeUpsertHooks []EmployeeHook

var employeeAfterInsertHooks []EmployeeHook
var employeeAfterSelectHooks []EmployeeHook
var employeeAfterUpdateHooks []EmployeeHook
var employeeAfterDeleteHooks []EmployeeHook
var employeeAfterUpsertHooks []EmployeeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Employee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Employee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Employee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Employee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Employee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Employee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Employee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Employee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Employee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmployeeHook registers your hook function for all future operations.
func AddEmployeeHook(hookPoint boil.HookPoint, employeeHook EmployeeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		employeeBeforeInsertHooks = append(employeeBeforeInsertHooks, employeeHook)
	case boil.BeforeUpdateHook:
		employeeBeforeUpdateHooks = append(employeeBeforeUpdateHooks, employeeHook)
	case boil.BeforeDeleteHook:
		employeeBeforeDeleteHooks = append(employeeBeforeDeleteHooks, employeeHook)
	case boil.BeforeUpsertHook:
		employeeBeforeUpsertHooks = append(employeeBeforeUpsertHooks, employeeHook)
	case boil.AfterInsertHook:
		employeeAfterInsertHooks = append(employeeAfterInsertHooks, employeeHook)
	case boil.AfterSelectHook:
		employeeAfterSelectHooks = append(employeeAfterSelectHooks, employeeHook)
	case boil.AfterUpdateHook:
		employeeAfterUpdateHooks = append(employeeAfterUpdateHooks, employeeHook)
	case boil.AfterDeleteHook:
		employeeAfterDeleteHooks = append(employeeAfterDeleteHooks, employeeHook)
	case boil.AfterUpsertHook:
		employeeAfterUpsertHooks = append(employeeAfterUpsertHooks, employeeHook)
	}
}

// OneG returns a single employee record from the query using the global executor.
func (q employeeQuery) OneG(ctx context.Context) (*Employee, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single employee record from the query using the global executor, and panics on error.
func (q employeeQuery) OneGP(ctx context.Context) *Employee {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single employee record from the query, and panics on error.
func (q employeeQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *Employee {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single employee record from the query.
func (q employeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Employee, error) {
	o := &Employee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for employees")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Employee records from the query using the global executor.
func (q employeeQuery) AllG(ctx context.Context) (EmployeeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all Employee records from the query using the global executor, and panics on error.
func (q employeeQuery) AllGP(ctx context.Context) EmployeeSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Employee records from the query, and panics on error.
func (q employeeQuery) AllP(ctx context.Context, exec boil.ContextExecutor) EmployeeSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Employee records from the query.
func (q employeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmployeeSlice, error) {
	var o []*Employee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Employee slice")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Employee records in the query, and panics on error.
func (q employeeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all Employee records in the query using the global executor, and panics on error.
func (q employeeQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Employee records in the query, and panics on error.
func (q employeeQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Employee records in the query.
func (q employeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count employees rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q employeeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q employeeQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q employeeQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q employeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if employees exists")
	}

	return count > 0, nil
}

// Business pointed to by the foreign key.
func (o *Employee) Business(mods ...qm.QueryMod) businessQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BusinessID),
	}

	queryMods = append(queryMods, mods...)

	query := Businesses(queryMods...)
	queries.SetFrom(query.Query, "`businesses`")

	return query
}

// LoadBusiness allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (employeeL) LoadBusiness(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		if !queries.IsNil(object.BusinessID) {
			args = append(args, object.BusinessID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BusinessID) {
				args = append(args, obj.BusinessID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`businesses`),
		qm.WhereIn(`businesses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Business")
	}

	var resultSlice []*Business
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Business")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for businesses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for businesses")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Business = foreign
		if foreign.R == nil {
			foreign.R = &businessR{}
		}
		foreign.R.Employees = append(foreign.R.Employees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BusinessID, foreign.ID) {
				local.R.Business = foreign
				if foreign.R == nil {
					foreign.R = &businessR{}
				}
				foreign.R.Employees = append(foreign.R.Employees, local)
				break
			}
		}
	}

	return nil
}

// SetBusinessG of the employee to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.Employees.
// Uses the global database handle.
func (o *Employee) SetBusinessG(ctx context.Context, insert bool, related *Business) error {
	return o.SetBusiness(ctx, boil.GetContextDB(), insert, related)
}

// SetBusinessP of the employee to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.Employees.
// Panics on error.
func (o *Employee) SetBusinessP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Business) {
	if err := o.SetBusiness(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBusinessGP of the employee to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.Employees.
// Uses the global database handle and panics on error.
func (o *Employee) SetBusinessGP(ctx context.Context, insert bool, related *Business) {
	if err := o.SetBusiness(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBusiness of the employee to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.Employees.
func (o *Employee) SetBusiness(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Business) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `employees` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"business_id"}),
		strmangle.WhereClause("`", "`", 0, employeePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BusinessID, related.ID)
	if o.R == nil {
		o.R = &employeeR{
			Business: related,
		}
	} else {
		o.R.Business = related
	}

	if related.R == nil {
		related.R = &businessR{
			Employees: EmployeeSlice{o},
		}
	} else {
		related.R.Employees = append(related.R.Employees, o)
	}

	return nil
}

// RemoveBusinessG relationship.
// Sets o.R.Business to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Employee) RemoveBusinessG(ctx context.Context, related *Business) error {
	return o.RemoveBusiness(ctx, boil.GetContextDB(), related)
}

// RemoveBusinessP relationship.
// Sets o.R.Business to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Employee) RemoveBusinessP(ctx context.Context, exec boil.ContextExecutor, related *Business) {
	if err := o.RemoveBusiness(ctx, exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBusinessGP relationship.
// Sets o.R.Business to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Employee) RemoveBusinessGP(ctx context.Context, related *Business) {
	if err := o.RemoveBusiness(ctx, boil.GetContextDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBusiness relationship.
// Sets o.R.Business to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Employee) RemoveBusiness(ctx context.Context, exec boil.ContextExecutor, related *Business) error {
	var err error

	queries.SetScanner(&o.BusinessID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("business_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Business = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Employees {
		if queries.Equal(o.BusinessID, ri.BusinessID) {
			continue
		}

		ln := len(related.R.Employees)
		if ln > 1 && i < ln-1 {
			related.R.Employees[i] = related.R.Employees[ln-1]
		}
		related.R.Employees = related.R.Employees[:ln-1]
		break
	}
	return nil
}

// Employees retrieves all the records using an executor.
func Employees(mods ...qm.QueryMod) employeeQuery {
	mods = append(mods, qm.From("`employees`"))
	return employeeQuery{NewQuery(mods...)}
}

// FindEmployeeG retrieves a single record by ID.
func FindEmployeeG(ctx context.Context, iD uint, selectCols ...string) (*Employee, error) {
	return FindEmployee(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindEmployeeP retrieves a single record by ID with an executor, and panics on error.
func FindEmployeeP(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) *Employee {
	retobj, err := FindEmployee(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindEmployeeGP retrieves a single record by ID, and panics on error.
func FindEmployeeGP(ctx context.Context, iD uint, selectCols ...string) *Employee {
	retobj, err := FindEmployee(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindEmployee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmployee(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Employee, error) {
	employeeObj := &Employee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `employees` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, employeeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from employees")
	}

	return employeeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Employee) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Employee) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Employee) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Employee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employees provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	employeeInsertCacheMut.RLock()
	cache, cached := employeeInsertCache[key]
	employeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `employees` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `employees` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `employees` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, employeePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into employees")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == employeeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for employees")
	}

CacheNoHooks:
	if !cached {
		employeeInsertCacheMut.Lock()
		employeeInsertCache[key] = cache
		employeeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Employee record using the global executor.
// See Update for more documentation.
func (o *Employee) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the Employee, and panics on error.
// See Update for more documentation.
func (o *Employee) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single Employee record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Employee) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the Employee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Employee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	employeeUpdateCacheMut.RLock()
	cache, cached := employeeUpdateCache[key]
	employeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update employees, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `employees` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, employeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, append(wl, employeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update employees row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for employees")
	}

	if !cached {
		employeeUpdateCacheMut.Lock()
		employeeUpdateCache[key] = cache
		employeeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q employeeQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q employeeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q employeeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for employees")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EmployeeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o EmployeeSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o EmployeeSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmployeeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `employees` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all employee")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Employee) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Employee) UpsertGP(ctx context.Context, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Employee) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLEmployeeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Employee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employees provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEmployeeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	employeeUpsertCacheMut.RLock()
	cache, cached := employeeUpsertCache[key]
	employeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert employees, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "employees", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `employees` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for employees")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == employeeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(employeeType, employeeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for employees")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for employees")
	}

CacheNoHooks:
	if !cached {
		employeeUpsertCacheMut.Lock()
		employeeUpsertCache[key] = cache
		employeeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Employee record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Employee) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single Employee record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Employee) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single Employee record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Employee) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single Employee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Employee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Employee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), employeePrimaryKeyMapping)
	sql := "DELETE FROM `employees` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for employees")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q employeeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q employeeQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q employeeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no employeeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employees")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EmployeeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o EmployeeSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o EmployeeSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmployeeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(employeeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `employees` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employees")
	}

	if len(employeeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Employee) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Employee provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Employee) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Employee) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Employee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmployee(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployeeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty EmployeeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EmployeeSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EmployeeSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployeeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmployeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `employees`.* FROM `employees` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmployeeSlice")
	}

	*o = slice

	return nil
}

// EmployeeExistsG checks if the Employee row exists.
func EmployeeExistsG(ctx context.Context, iD uint) (bool, error) {
	return EmployeeExists(ctx, boil.GetContextDB(), iD)
}

// EmployeeExistsP checks if the Employee row exists. Panics on error.
func EmployeeExistsP(ctx context.Context, exec boil.ContextExecutor, iD uint) bool {
	e, err := EmployeeExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// EmployeeExistsGP checks if the Employee row exists. Panics on error.
func EmployeeExistsGP(ctx context.Context, iD uint) bool {
	e, err := EmployeeExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// EmployeeExists checks if the Employee row exists.
func EmployeeExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `employees` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if employees exists")
	}

	return exists, nil
}
