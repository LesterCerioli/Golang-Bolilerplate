// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VisitClient is the client API for Visit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisitClient interface {
	// Simple return the visit id
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*VisitResponse, error)
	// Update/Create a device
	Set(ctx context.Context, in *VisitRequest, opts ...grpc.CallOption) (*VisitResponse, error)
}

type visitClient struct {
	cc grpc.ClientConnInterface
}

func NewVisitClient(cc grpc.ClientConnInterface) VisitClient {
	return &visitClient{cc}
}

func (c *visitClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*VisitResponse, error) {
	out := new(VisitResponse)
	err := c.cc.Invoke(ctx, "/pb.Visit/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitClient) Set(ctx context.Context, in *VisitRequest, opts ...grpc.CallOption) (*VisitResponse, error) {
	out := new(VisitResponse)
	err := c.cc.Invoke(ctx, "/pb.Visit/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitServer is the server API for Visit service.
// All implementations must embed UnimplementedVisitServer
// for forward compatibility
type VisitServer interface {
	// Simple return the visit id
	Get(context.Context, *ID) (*VisitResponse, error)
	// Update/Create a device
	Set(context.Context, *VisitRequest) (*VisitResponse, error)
	mustEmbedUnimplementedVisitServer()
}

// UnimplementedVisitServer must be embedded to have forward compatible implementations.
type UnimplementedVisitServer struct {
}

func (UnimplementedVisitServer) Get(context.Context, *ID) (*VisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVisitServer) Set(context.Context, *VisitRequest) (*VisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedVisitServer) mustEmbedUnimplementedVisitServer() {}

// UnsafeVisitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisitServer will
// result in compilation errors.
type UnsafeVisitServer interface {
	mustEmbedUnimplementedVisitServer()
}

func RegisterVisitServer(s grpc.ServiceRegistrar, srv VisitServer) {
	s.RegisterService(&Visit_ServiceDesc, srv)
}

func _Visit_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visit/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visit_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visit/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServer).Set(ctx, req.(*VisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Visit_ServiceDesc is the grpc.ServiceDesc for Visit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Visit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Visit",
	HandlerType: (*VisitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Visit_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Visit_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/transport/grpc/proto/visit.proto",
}
