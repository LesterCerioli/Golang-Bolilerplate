// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: src/transport/grpc/proto/business.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _business_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on BusinessUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BusinessUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetID() <= 0 {
		return BusinessUpdateRequestValidationError{
			field:  "ID",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		return BusinessUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
	}

	if wrapper := m.GetWebsite(); wrapper != nil {

		if uri, err := url.Parse(wrapper.GetValue()); err != nil {
			return BusinessUpdateRequestValidationError{
				field:  "Website",
				reason: "value must be a valid URI",
				cause:  err,
			}
		} else if !uri.IsAbs() {
			return BusinessUpdateRequestValidationError{
				field:  "Website",
				reason: "value must be absolute",
			}
		}

	}

	return nil
}

// BusinessUpdateRequestValidationError is the validation error returned by
// BusinessUpdateRequest.Validate if the designated constraints aren't met.
type BusinessUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUpdateRequestValidationError) ErrorName() string {
	return "BusinessUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUpdateRequestValidationError{}

// Validate checks the field values on BusinessResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BusinessResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	if v, ok := interface{}(m.GetWebsite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessResponseValidationError{
				field:  "Website",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BusinessResponseValidationError is the validation error returned by
// BusinessResponse.Validate if the designated constraints aren't met.
type BusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessResponseValidationError) ErrorName() string { return "BusinessResponseValidationError" }

// Error satisfies the builtin error interface
func (e BusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessResponseValidationError{}

// Validate checks the field values on BusinessCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BusinessCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		return BusinessCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
	}

	if wrapper := m.GetWebsite(); wrapper != nil {

		if uri, err := url.Parse(wrapper.GetValue()); err != nil {
			return BusinessCreateRequestValidationError{
				field:  "Website",
				reason: "value must be a valid URI",
				cause:  err,
			}
		} else if !uri.IsAbs() {
			return BusinessCreateRequestValidationError{
				field:  "Website",
				reason: "value must be absolute",
			}
		}

	}

	if len(m.GetOffices()) < 1 {
		return BusinessCreateRequestValidationError{
			field:  "Offices",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetOffices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessCreateRequestValidationError{
					field:  fmt.Sprintf("Offices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetEmployees()) > 2 {
		return BusinessCreateRequestValidationError{
			field:  "Employees",
			reason: "value must contain no more than 2 item(s)",
		}
	}

	for idx, item := range m.GetEmployees() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessCreateRequestValidationError{
					field:  fmt.Sprintf("Employees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BusinessCreateRequestValidationError is the validation error returned by
// BusinessCreateRequest.Validate if the designated constraints aren't met.
type BusinessCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessCreateRequestValidationError) ErrorName() string {
	return "BusinessCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessCreateRequestValidationError{}

// Validate checks the field values on BusinessCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BusinessCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	if v, ok := interface{}(m.GetWebsite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessCreateResponseValidationError{
				field:  "Website",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOffices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessCreateResponseValidationError{
					field:  fmt.Sprintf("Offices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEmployees() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessCreateResponseValidationError{
					field:  fmt.Sprintf("Employees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessCreateResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessCreateResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BusinessCreateResponseValidationError is the validation error returned by
// BusinessCreateResponse.Validate if the designated constraints aren't met.
type BusinessCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessCreateResponseValidationError) ErrorName() string {
	return "BusinessCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessCreateResponseValidationError{}

// Validate checks the field values on OfficeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OfficeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		return OfficeRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
	}

	if wrapper := m.GetEmail(); wrapper != nil {

		if err := m._validateEmail(wrapper.GetValue()); err != nil {
			return OfficeRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
		}

	}

	if wrapper := m.GetPhone(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 8 {
			return OfficeRequestValidationError{
				field:  "Phone",
				reason: "value length must be at least 8 runes",
			}
		}

	}

	if wrapper := m.GetCountry(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 2 {
			return OfficeRequestValidationError{
				field:  "Country",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	if wrapper := m.GetState(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 2 {
			return OfficeRequestValidationError{
				field:  "State",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	if wrapper := m.GetCity(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 2 {
			return OfficeRequestValidationError{
				field:  "City",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	if wrapper := m.GetAddress(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 2 {
			return OfficeRequestValidationError{
				field:  "Address",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	if wrapper := m.GetZipcode(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 2 {
			return OfficeRequestValidationError{
				field:  "Zipcode",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	return nil
}

func (m *OfficeRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *OfficeRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// OfficeRequestValidationError is the validation error returned by
// OfficeRequest.Validate if the designated constraints aren't met.
type OfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfficeRequestValidationError) ErrorName() string { return "OfficeRequestValidationError" }

// Error satisfies the builtin error interface
func (e OfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfficeRequestValidationError{}

// Validate checks the field values on OfficesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OfficesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "Phone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "City",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetZipcode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "Zipcode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficesResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OfficesResponseValidationError is the validation error returned by
// OfficesResponse.Validate if the designated constraints aren't met.
type OfficesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfficesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfficesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfficesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfficesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfficesResponseValidationError) ErrorName() string { return "OfficesResponseValidationError" }

// Error satisfies the builtin error interface
func (e OfficesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfficesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfficesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfficesResponseValidationError{}

// Validate checks the field values on EmployeeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EmployeeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFirstName()) < 2 {
		return EmployeeRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 2 runes",
		}
	}

	if wrapper := m.GetLastName(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 2 {
			return EmployeeRequestValidationError{
				field:  "LastName",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return EmployeeRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) > 50 {
		return EmployeeRequestValidationError{
			field:  "Password",
			reason: "value length must be at most 50 runes",
		}
	}

	return nil
}

func (m *EmployeeRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *EmployeeRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmployeeRequestValidationError is the validation error returned by
// EmployeeRequest.Validate if the designated constraints aren't met.
type EmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeRequestValidationError) ErrorName() string { return "EmployeeRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeRequestValidationError{}

// Validate checks the field values on EmployeeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EmployeeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for FirstName

	if v, ok := interface{}(m.GetLastName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmployeeResponseValidationError{
				field:  "LastName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	// no validation rules for Active

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmployeeResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmployeeResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EmployeeResponseValidationError is the validation error returned by
// EmployeeResponse.Validate if the designated constraints aren't met.
type EmployeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeResponseValidationError) ErrorName() string { return "EmployeeResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeResponseValidationError{}
