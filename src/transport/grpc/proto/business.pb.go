// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.11.4
// source: src/transport/grpc/proto/business.proto

package pb

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Business Update Request
type BusinessUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint32                `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name    string                `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Website *wrappers.StringValue `protobuf:"bytes,3,opt,name=Website,proto3" json:"website"`
}

func (x *BusinessUpdateRequest) Reset() {
	*x = BusinessUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_transport_grpc_proto_business_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUpdateRequest) ProtoMessage() {}

func (x *BusinessUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_transport_grpc_proto_business_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUpdateRequest.ProtoReflect.Descriptor instead.
func (*BusinessUpdateRequest) Descriptor() ([]byte, []int) {
	return file_src_transport_grpc_proto_business_proto_rawDescGZIP(), []int{0}
}

func (x *BusinessUpdateRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BusinessUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessUpdateRequest) GetWebsite() *wrappers.StringValue {
	if x != nil {
		return x.Website
	}
	return nil
}

// Business Get/Update Response
type BusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32                `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name      string                `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Website   *wrappers.StringValue `protobuf:"bytes,3,opt,name=Website,proto3" json:"website"`
	CreatedAt *timestamp.Timestamp  `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"created_at"`
	UpdatedAt *timestamp.Timestamp  `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"updated_at"`
}

func (x *BusinessResponse) Reset() {
	*x = BusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_transport_grpc_proto_business_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessResponse) ProtoMessage() {}

func (x *BusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_transport_grpc_proto_business_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessResponse.ProtoReflect.Descriptor instead.
func (*BusinessResponse) Descriptor() ([]byte, []int) {
	return file_src_transport_grpc_proto_business_proto_rawDescGZIP(), []int{1}
}

func (x *BusinessResponse) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BusinessResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessResponse) GetWebsite() *wrappers.StringValue {
	if x != nil {
		return x.Website
	}
	return nil
}

func (x *BusinessResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BusinessResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Business Create Request
type BusinessCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`
	Website   *wrappers.StringValue `protobuf:"bytes,2,opt,name=Website,proto3" json:"website"`
	Offices   []*OfficeRequest      `protobuf:"bytes,3,rep,name=offices,proto3" json:"offices"`
	Employees []*EmployeeRequest    `protobuf:"bytes,4,rep,name=Employees,proto3" json:"employees"`
}

func (x *BusinessCreateRequest) Reset() {
	*x = BusinessCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_transport_grpc_proto_business_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCreateRequest) ProtoMessage() {}

func (x *BusinessCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_transport_grpc_proto_business_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCreateRequest.ProtoReflect.Descriptor instead.
func (*BusinessCreateRequest) Descriptor() ([]byte, []int) {
	return file_src_transport_grpc_proto_business_proto_rawDescGZIP(), []int{2}
}

func (x *BusinessCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessCreateRequest) GetWebsite() *wrappers.StringValue {
	if x != nil {
		return x.Website
	}
	return nil
}

func (x *BusinessCreateRequest) GetOffices() []*OfficeRequest {
	if x != nil {
		return x.Offices
	}
	return nil
}

func (x *BusinessCreateRequest) GetEmployees() []*EmployeeRequest {
	if x != nil {
		return x.Employees
	}
	return nil
}

// Business Create Response
type BusinessCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32                `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name      string                `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Website   *wrappers.StringValue `protobuf:"bytes,3,opt,name=Website,proto3" json:"website"`
	Offices   []*OfficesResponse    `protobuf:"bytes,4,rep,name=Offices,proto3" json:"offices"`
	Employees []*EmployeeResponse   `protobuf:"bytes,5,rep,name=Employees,proto3" json:"employees"`
	CreatedAt *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"created_at"`
	UpdatedAt *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"updated_at"`
}

func (x *BusinessCreateResponse) Reset() {
	*x = BusinessCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_transport_grpc_proto_business_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCreateResponse) ProtoMessage() {}

func (x *BusinessCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_transport_grpc_proto_business_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCreateResponse.ProtoReflect.Descriptor instead.
func (*BusinessCreateResponse) Descriptor() ([]byte, []int) {
	return file_src_transport_grpc_proto_business_proto_rawDescGZIP(), []int{3}
}

func (x *BusinessCreateResponse) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BusinessCreateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessCreateResponse) GetWebsite() *wrappers.StringValue {
	if x != nil {
		return x.Website
	}
	return nil
}

func (x *BusinessCreateResponse) GetOffices() []*OfficesResponse {
	if x != nil {
		return x.Offices
	}
	return nil
}

func (x *BusinessCreateResponse) GetEmployees() []*EmployeeResponse {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *BusinessCreateResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BusinessCreateResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Office Create Request
type OfficeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Email   *wrappers.StringValue `protobuf:"bytes,3,opt,name=Email,proto3" json:"email"`
	Phone   *wrappers.StringValue `protobuf:"bytes,4,opt,name=Phone,proto3" json:"phone"`
	Country *wrappers.StringValue `protobuf:"bytes,5,opt,name=Country,proto3" json:"country"`
	State   *wrappers.StringValue `protobuf:"bytes,6,opt,name=State,proto3" json:"state"`
	City    *wrappers.StringValue `protobuf:"bytes,8,opt,name=City,proto3" json:"city"`
	Address *wrappers.StringValue `protobuf:"bytes,9,opt,name=Address,proto3" json:"address"`
	Zipcode *wrappers.StringValue `protobuf:"bytes,10,opt,name=Zipcode,proto3" json:"zipcode"`
}

func (x *OfficeRequest) Reset() {
	*x = OfficeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_transport_grpc_proto_business_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficeRequest) ProtoMessage() {}

func (x *OfficeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_transport_grpc_proto_business_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficeRequest.ProtoReflect.Descriptor instead.
func (*OfficeRequest) Descriptor() ([]byte, []int) {
	return file_src_transport_grpc_proto_business_proto_rawDescGZIP(), []int{4}
}

func (x *OfficeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OfficeRequest) GetEmail() *wrappers.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *OfficeRequest) GetPhone() *wrappers.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *OfficeRequest) GetCountry() *wrappers.StringValue {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *OfficeRequest) GetState() *wrappers.StringValue {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *OfficeRequest) GetCity() *wrappers.StringValue {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *OfficeRequest) GetAddress() *wrappers.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OfficeRequest) GetZipcode() *wrappers.StringValue {
	if x != nil {
		return x.Zipcode
	}
	return nil
}

// Office Create Response, Update Request + Response
type OfficesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32                `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name      string                `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Email     *wrappers.StringValue `protobuf:"bytes,3,opt,name=Email,proto3" json:"email"`
	Phone     *wrappers.StringValue `protobuf:"bytes,4,opt,name=Phone,proto3" json:"phone"`
	Country   *wrappers.StringValue `protobuf:"bytes,5,opt,name=Country,proto3" json:"country"`
	State     *wrappers.StringValue `protobuf:"bytes,6,opt,name=State,proto3" json:"state"`
	City      *wrappers.StringValue `protobuf:"bytes,7,opt,name=City,proto3" json:"city"`
	Address   *wrappers.StringValue `protobuf:"bytes,8,opt,name=Address,proto3" json:"address"`
	Zipcode   *wrappers.StringValue `protobuf:"bytes,9,opt,name=Zipcode,proto3" json:"zipcode"`
	CreatedAt *timestamp.Timestamp  `protobuf:"bytes,11,opt,name=CreatedAt,proto3" json:"created_at"`
	UpdatedAt *timestamp.Timestamp  `protobuf:"bytes,12,opt,name=UpdatedAt,proto3" json:"updated_at"`
}

func (x *OfficesResponse) Reset() {
	*x = OfficesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_transport_grpc_proto_business_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficesResponse) ProtoMessage() {}

func (x *OfficesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_transport_grpc_proto_business_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficesResponse.ProtoReflect.Descriptor instead.
func (*OfficesResponse) Descriptor() ([]byte, []int) {
	return file_src_transport_grpc_proto_business_proto_rawDescGZIP(), []int{5}
}

func (x *OfficesResponse) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OfficesResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OfficesResponse) GetEmail() *wrappers.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *OfficesResponse) GetPhone() *wrappers.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *OfficesResponse) GetCountry() *wrappers.StringValue {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *OfficesResponse) GetState() *wrappers.StringValue {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *OfficesResponse) GetCity() *wrappers.StringValue {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *OfficesResponse) GetAddress() *wrappers.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OfficesResponse) GetZipcode() *wrappers.StringValue {
	if x != nil {
		return x.Zipcode
	}
	return nil
}

func (x *OfficesResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OfficesResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Employee Create Request
type EmployeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string                `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"first_name"`
	LastName  *wrappers.StringValue `protobuf:"bytes,3,opt,name=LastName,proto3" json:"last_name"`
	Email     string                `protobuf:"bytes,4,opt,name=Email,proto3" json:"email"`
	Password  string                `protobuf:"bytes,5,opt,name=Password,proto3" json:"password"`
}

func (x *EmployeeRequest) Reset() {
	*x = EmployeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_transport_grpc_proto_business_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeRequest) ProtoMessage() {}

func (x *EmployeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_transport_grpc_proto_business_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeRequest.ProtoReflect.Descriptor instead.
func (*EmployeeRequest) Descriptor() ([]byte, []int) {
	return file_src_transport_grpc_proto_business_proto_rawDescGZIP(), []int{6}
}

func (x *EmployeeRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *EmployeeRequest) GetLastName() *wrappers.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *EmployeeRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EmployeeRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Employee Create Response, Update Request + Response
type EmployeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32                `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	FirstName string                `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"first_name"`
	LastName  *wrappers.StringValue `protobuf:"bytes,3,opt,name=LastName,proto3" json:"last_name"`
	Email     string                `protobuf:"bytes,4,opt,name=Email,proto3" json:"email"`
	Active    bool                  `protobuf:"varint,5,opt,name=Active,proto3" json:"active"`
	CreatedAt *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"created_at"`
	UpdatedAt *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"updated_at"`
}

func (x *EmployeeResponse) Reset() {
	*x = EmployeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_transport_grpc_proto_business_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeResponse) ProtoMessage() {}

func (x *EmployeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_transport_grpc_proto_business_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeResponse.ProtoReflect.Descriptor instead.
func (*EmployeeResponse) Descriptor() ([]byte, []int) {
	return file_src_transport_grpc_proto_business_proto_rawDescGZIP(), []int{7}
}

func (x *EmployeeResponse) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *EmployeeResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *EmployeeResponse) GetLastName() *wrappers.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *EmployeeResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EmployeeResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *EmployeeResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EmployeeResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_src_transport_grpc_proto_business_proto protoreflect.FileDescriptor

var file_src_transport_grpc_proto_business_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x72, 0x63, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x73, 0x72, 0x63, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x72, 0x69, 0x6b, 0x72, 0x73, 0x6e, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x74, 0x61, 0x67, 0x2f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x53, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x07, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x10, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x22, 0x52, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x50, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a, 0x84,
	0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x50, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16,
	0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xbd, 0x02, 0x0a, 0x15, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03, 0x0b,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x02, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x22, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x88, 0x01, 0x01, 0x52, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x07, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x73, 0x22, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x25, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x22, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x10, 0x02, 0x52, 0x09, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x22, 0xde, 0x03, 0x0a, 0x16, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03,
	0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x22, 0x52, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x22, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x15, 0x9a, 0x84,
	0x9e, 0x03, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x22, 0x52, 0x09, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a,
	0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x50, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xf5, 0x04, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20,
	0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x00, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01,
	0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4c, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08, 0x52, 0x05,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02,
	0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x63, 0x69, 0x74, 0x79, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x04, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x52, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x02, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xfb, 0x05, 0x0a, 0x0f, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03,
	0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x9a, 0x84,
	0x9e, 0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x05, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x52, 0x05, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x45, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x9a, 0x84,
	0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63,
	0x69, 0x74, 0x79, 0x22, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x07, 0x5a, 0x69, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x0f, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x09,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x10,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x3e, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xb2, 0x03, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69,
	0x64, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x15, 0x9a, 0x84,
	0x9e, 0x03, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84,
	0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x52,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xfd, 0x01, 0x0a, 0x08, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x44, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x7b,
	0x49, 0x44, 0x7d, 0x12, 0x58, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x7b,
	0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_transport_grpc_proto_business_proto_rawDescOnce sync.Once
	file_src_transport_grpc_proto_business_proto_rawDescData = file_src_transport_grpc_proto_business_proto_rawDesc
)

func file_src_transport_grpc_proto_business_proto_rawDescGZIP() []byte {
	file_src_transport_grpc_proto_business_proto_rawDescOnce.Do(func() {
		file_src_transport_grpc_proto_business_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_transport_grpc_proto_business_proto_rawDescData)
	})
	return file_src_transport_grpc_proto_business_proto_rawDescData
}

var file_src_transport_grpc_proto_business_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_src_transport_grpc_proto_business_proto_goTypes = []interface{}{
	(*BusinessUpdateRequest)(nil),  // 0: pb.BusinessUpdateRequest
	(*BusinessResponse)(nil),       // 1: pb.BusinessResponse
	(*BusinessCreateRequest)(nil),  // 2: pb.BusinessCreateRequest
	(*BusinessCreateResponse)(nil), // 3: pb.BusinessCreateResponse
	(*OfficeRequest)(nil),          // 4: pb.OfficeRequest
	(*OfficesResponse)(nil),        // 5: pb.OfficesResponse
	(*EmployeeRequest)(nil),        // 6: pb.EmployeeRequest
	(*EmployeeResponse)(nil),       // 7: pb.EmployeeResponse
	(*wrappers.StringValue)(nil),   // 8: google.protobuf.StringValue
	(*timestamp.Timestamp)(nil),    // 9: google.protobuf.Timestamp
	(*ID)(nil),                     // 10: pb.ID
}
var file_src_transport_grpc_proto_business_proto_depIdxs = []int32{
	8,  // 0: pb.BusinessUpdateRequest.Website:type_name -> google.protobuf.StringValue
	8,  // 1: pb.BusinessResponse.Website:type_name -> google.protobuf.StringValue
	9,  // 2: pb.BusinessResponse.CreatedAt:type_name -> google.protobuf.Timestamp
	9,  // 3: pb.BusinessResponse.UpdatedAt:type_name -> google.protobuf.Timestamp
	8,  // 4: pb.BusinessCreateRequest.Website:type_name -> google.protobuf.StringValue
	4,  // 5: pb.BusinessCreateRequest.offices:type_name -> pb.OfficeRequest
	6,  // 6: pb.BusinessCreateRequest.Employees:type_name -> pb.EmployeeRequest
	8,  // 7: pb.BusinessCreateResponse.Website:type_name -> google.protobuf.StringValue
	5,  // 8: pb.BusinessCreateResponse.Offices:type_name -> pb.OfficesResponse
	7,  // 9: pb.BusinessCreateResponse.Employees:type_name -> pb.EmployeeResponse
	9,  // 10: pb.BusinessCreateResponse.CreatedAt:type_name -> google.protobuf.Timestamp
	9,  // 11: pb.BusinessCreateResponse.UpdatedAt:type_name -> google.protobuf.Timestamp
	8,  // 12: pb.OfficeRequest.Email:type_name -> google.protobuf.StringValue
	8,  // 13: pb.OfficeRequest.Phone:type_name -> google.protobuf.StringValue
	8,  // 14: pb.OfficeRequest.Country:type_name -> google.protobuf.StringValue
	8,  // 15: pb.OfficeRequest.State:type_name -> google.protobuf.StringValue
	8,  // 16: pb.OfficeRequest.City:type_name -> google.protobuf.StringValue
	8,  // 17: pb.OfficeRequest.Address:type_name -> google.protobuf.StringValue
	8,  // 18: pb.OfficeRequest.Zipcode:type_name -> google.protobuf.StringValue
	8,  // 19: pb.OfficesResponse.Email:type_name -> google.protobuf.StringValue
	8,  // 20: pb.OfficesResponse.Phone:type_name -> google.protobuf.StringValue
	8,  // 21: pb.OfficesResponse.Country:type_name -> google.protobuf.StringValue
	8,  // 22: pb.OfficesResponse.State:type_name -> google.protobuf.StringValue
	8,  // 23: pb.OfficesResponse.City:type_name -> google.protobuf.StringValue
	8,  // 24: pb.OfficesResponse.Address:type_name -> google.protobuf.StringValue
	8,  // 25: pb.OfficesResponse.Zipcode:type_name -> google.protobuf.StringValue
	9,  // 26: pb.OfficesResponse.CreatedAt:type_name -> google.protobuf.Timestamp
	9,  // 27: pb.OfficesResponse.UpdatedAt:type_name -> google.protobuf.Timestamp
	8,  // 28: pb.EmployeeRequest.LastName:type_name -> google.protobuf.StringValue
	8,  // 29: pb.EmployeeResponse.LastName:type_name -> google.protobuf.StringValue
	9,  // 30: pb.EmployeeResponse.CreatedAt:type_name -> google.protobuf.Timestamp
	9,  // 31: pb.EmployeeResponse.UpdatedAt:type_name -> google.protobuf.Timestamp
	10, // 32: pb.Business.Get:input_type -> pb.ID
	2,  // 33: pb.Business.Create:input_type -> pb.BusinessCreateRequest
	0,  // 34: pb.Business.Update:input_type -> pb.BusinessUpdateRequest
	1,  // 35: pb.Business.Get:output_type -> pb.BusinessResponse
	3,  // 36: pb.Business.Create:output_type -> pb.BusinessCreateResponse
	1,  // 37: pb.Business.Update:output_type -> pb.BusinessResponse
	35, // [35:38] is the sub-list for method output_type
	32, // [32:35] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_src_transport_grpc_proto_business_proto_init() }
func file_src_transport_grpc_proto_business_proto_init() {
	if File_src_transport_grpc_proto_business_proto != nil {
		return
	}
	file_src_transport_grpc_proto_generics_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_src_transport_grpc_proto_business_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_transport_grpc_proto_business_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_transport_grpc_proto_business_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_transport_grpc_proto_business_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_transport_grpc_proto_business_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_transport_grpc_proto_business_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_transport_grpc_proto_business_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_transport_grpc_proto_business_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_transport_grpc_proto_business_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_transport_grpc_proto_business_proto_goTypes,
		DependencyIndexes: file_src_transport_grpc_proto_business_proto_depIdxs,
		MessageInfos:      file_src_transport_grpc_proto_business_proto_msgTypes,
	}.Build()
	File_src_transport_grpc_proto_business_proto = out.File
	file_src_transport_grpc_proto_business_proto_rawDesc = nil
	file_src_transport_grpc_proto_business_proto_goTypes = nil
	file_src_transport_grpc_proto_business_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BusinessClient interface {
	// Simple return the business by id
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BusinessResponse, error)
	// Create Business & Offices & Main Employee
	Create(ctx context.Context, in *BusinessCreateRequest, opts ...grpc.CallOption) (*BusinessCreateResponse, error)
	// Update Business
	Update(ctx context.Context, in *BusinessUpdateRequest, opts ...grpc.CallOption) (*BusinessResponse, error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*BusinessResponse, error) {
	out := new(BusinessResponse)
	err := c.cc.Invoke(ctx, "/pb.Business/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) Create(ctx context.Context, in *BusinessCreateRequest, opts ...grpc.CallOption) (*BusinessCreateResponse, error) {
	out := new(BusinessCreateResponse)
	err := c.cc.Invoke(ctx, "/pb.Business/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) Update(ctx context.Context, in *BusinessUpdateRequest, opts ...grpc.CallOption) (*BusinessResponse, error) {
	out := new(BusinessResponse)
	err := c.cc.Invoke(ctx, "/pb.Business/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServer is the server API for Business service.
type BusinessServer interface {
	// Simple return the business by id
	Get(context.Context, *ID) (*BusinessResponse, error)
	// Create Business & Offices & Main Employee
	Create(context.Context, *BusinessCreateRequest) (*BusinessCreateResponse, error)
	// Update Business
	Update(context.Context, *BusinessUpdateRequest) (*BusinessResponse, error)
}

// UnimplementedBusinessServer can be embedded to have forward compatible implementations.
type UnimplementedBusinessServer struct {
}

func (*UnimplementedBusinessServer) Get(context.Context, *ID) (*BusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBusinessServer) Create(context.Context, *BusinessCreateRequest) (*BusinessCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedBusinessServer) Update(context.Context, *BusinessUpdateRequest) (*BusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterBusinessServer(s *grpc.Server, srv BusinessServer) {
	s.RegisterService(&_Business_serviceDesc, srv)
}

func _Business_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Business/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Business/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).Create(ctx, req.(*BusinessCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Business/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).Update(ctx, req.(*BusinessUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Business_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Business_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Business_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Business_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/transport/grpc/proto/business.proto",
}
