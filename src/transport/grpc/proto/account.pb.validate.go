// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: src/transport/grpc/proto/account.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _account_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AccountUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccountUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetID() <= 0 {
		return AccountUpdateRequestValidationError{
			field:  "ID",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		return AccountUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
	}

	return nil
}

// AccountUpdateRequestValidationError is the validation error returned by
// AccountUpdateRequest.Validate if the designated constraints aren't met.
type AccountUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUpdateRequestValidationError) ErrorName() string {
	return "AccountUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUpdateRequestValidationError{}

// Validate checks the field values on AccountResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	if v, ok := interface{}(m.GetWebsite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountResponseValidationError{
				field:  "Website",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AccountResponseValidationError is the validation error returned by
// AccountResponse.Validate if the designated constraints aren't met.
type AccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountResponseValidationError) ErrorName() string { return "AccountResponseValidationError" }

// Error satisfies the builtin error interface
func (e AccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountResponseValidationError{}

// Validate checks the field values on AccountCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccountCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		return AccountCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
	}

	if l := len(m.GetEmployees()); l < 1 || l > 2 {
		return AccountCreateRequestValidationError{
			field:  "Employees",
			reason: "value must contain between 1 and 2 items, inclusive",
		}
	}

	for idx, item := range m.GetEmployees() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountCreateRequestValidationError{
					field:  fmt.Sprintf("Employees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AccountCreateRequestValidationError is the validation error returned by
// AccountCreateRequest.Validate if the designated constraints aren't met.
type AccountCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCreateRequestValidationError) ErrorName() string {
	return "AccountCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCreateRequestValidationError{}

// Validate checks the field values on AccountCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccountCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountCreateResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountCreateResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountCreateResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AccountCreateResponseValidationError is the validation error returned by
// AccountCreateResponse.Validate if the designated constraints aren't met.
type AccountCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCreateResponseValidationError) ErrorName() string {
	return "AccountCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCreateResponseValidationError{}

// Validate checks the field values on UserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFirstName()) < 2 {
		return UserRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 2 runes",
		}
	}

	if wrapper := m.GetLastName(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 2 {
			return UserRequestValidationError{
				field:  "LastName",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return UserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 50 {
		return UserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 50 runes, inclusive",
		}
	}

	return nil
}

func (m *UserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserRequestValidationError is the validation error returned by
// UserRequest.Validate if the designated constraints aren't met.
type UserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRequestValidationError) ErrorName() string { return "UserRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRequestValidationError{}

// Validate checks the field values on UserResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for FirstName

	if v, ok := interface{}(m.GetLastName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserResponseValidationError{
				field:  "LastName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	// no validation rules for Active

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserResponseValidationError is the validation error returned by
// UserResponse.Validate if the designated constraints aren't met.
type UserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserResponseValidationError) ErrorName() string { return "UserResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserResponseValidationError{}
